{"version":3,"sources":["../src/ExpoCameraTextureLoader.js"],"names":["neverEnding","Promise","available","NativeModules","ExponentGLObjectManager","createCameraTextureAsync","warned","ExpoCameraTextureLoader","objIds","WeakMap","input","Camera","console","log","texture","exglObjId","get","destroyObjectAsync","delete","camera","gl","exglCtxId","__exglCtxId","disposed","dispose","glView","getExtension","promise","reject","Error","then","set","width","height","WebGLTextureLoaderAsyncHashCache","priority","globalRegistry","add"],"mappings":";;;;;;;;AACA;;AAIA;;AACA;;;;;;;;;;;;AAEA,IAAMA,cAAc,IAAIC,OAAJ,CAAY,YAAM,CAAE,CAApB,CAApB;;AAEA,IAAMC,YAAY,CAAC,EACjBC,2BAAcC,uBAAd,IACAD,2BAAcC,uBAAd,CAAsCC,wBAFrB,CAAnB;;AAKA,IAAIC,SAAS,KAAb;;IAEMC,uB;;;;;;;;;;;;;;wNAGJC,M,GAAwC,IAAIC,OAAJ,E;;;;;4BAEhCC,K,EAAY;AAClB,UAAIA,SAASA,iBAAiBC,YAA9B,EAAsC;AACpC,YAAIT,SAAJ,EAAe,OAAO,IAAP;AACf,YAAI,CAACI,MAAL,EAAa;AACXA,mBAAS,IAAT;AACAM,kBAAQC,GAAR,CACE,2IADF;AAGD;AACF;AACD,aAAO,KAAP;AACD;;;mCAEcC,O,EAAuB;AACpC,UAAMC,YAAY,KAAKP,MAAL,CAAYQ,GAAZ,CAAgBF,OAAhB,CAAlB;AACA,UAAIC,SAAJ,EAAe;AACbZ,mCAAcC,uBAAd,CAAsCa,kBAAtC,CAAyDF,SAAzD;AACD;AACD,WAAKP,MAAL,CAAYU,MAAZ,CAAmBJ,OAAnB;AACD;;;8BAESK,M,EAAgB;AACxB,aAAO,iCAAeA,MAAf,CAAP;AACD;;;gCAEWA,M,EAAgB;AAAA;;AAAA,UAClBC,EADkB,GACX,IADW,CAClBA,EADkB;AAE1B;;AAF0B,UAGLC,SAHK,GAGSD,EAHT,CAGlBE,WAHkB;;AAI1B,UAAIC,WAAW,KAAf;AACA,UAAMC,UAAU,SAAVA,OAAU,GAAM;AACpBD,mBAAW,IAAX;AACD,OAFD;AAGA,UAAME,SAASL,GAAGM,YAAH,CAAgB,WAAhB,CAAf;AACA,UAAMC,UAAsB,CAACF,MAAD,GACxBxB,QAAQ2B,MAAR,CAAe,IAAIC,KAAJ,CAAU,yBAAV,CAAf,CADwB,GAExBJ,OAAOpB,wBAAP,CAAgCc,MAAhC,EAAwCW,IAAxC,CAA6C,mBAAW;AACtD,YAAIP,QAAJ,EAAc,OAAOvB,WAAP;AACd;AACA,eAAKQ,MAAL,CAAYuB,GAAZ,CAAgBjB,OAAhB,EAAyBA,QAAQC,SAAjC;AACA,YAAMiB,QAAQ,CAAd;AACA,YAAMC,SAAS,CAAf;AACA;AACA,eAAO,EAAEnB,gBAAF,EAAWkB,YAAX,EAAkBC,cAAlB,EAAP;AACD,OARD,CAFJ;AAWA,aAAO,EAAEN,gBAAF,EAAWH,gBAAX,EAAP;AACD;;;;EAnDmCU,oD;;AAAhC3B,uB,CACG4B,Q,GAAW,CAAC,G;;;AAqDrBC,mCAAeC,GAAf,CAAmB9B,uBAAnB;;kBAEeA,uB","file":"ExpoCameraTextureLoader.js","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\nimport { NativeModules, findNodeHandle } from \"react-native\";\nimport Expo, { Camera } from \"expo\";\n\nconst neverEnding = new Promise(() => {});\n\nconst available = !!(\n  NativeModules.ExponentGLObjectManager &&\n  NativeModules.ExponentGLObjectManager.createCameraTextureAsync\n);\n\nlet warned = false;\n\nclass ExpoCameraTextureLoader extends WebGLTextureLoaderAsyncHashCache<Camera> {\n  static priority = -199;\n\n  objIds: WeakMap<WebGLTexture, number> = new WeakMap();\n\n  canLoad(input: any) {\n    if (input && input instanceof Camera) {\n      if (available) return true;\n      if (!warned) {\n        warned = true;\n        console.log(\n          \"webgltexture-loader-expo: ExponentGLObjectManager.createCameraTextureAsync is not available. Make sure to use the correct version of Expo\"\n        );\n      }\n    }\n    return false;\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    const exglObjId = this.objIds.get(texture);\n    if (exglObjId) {\n      NativeModules.ExponentGLObjectManager.destroyObjectAsync(exglObjId);\n    }\n    this.objIds.delete(texture);\n  }\n\n  inputHash(camera: Camera) {\n    return findNodeHandle(camera);\n  }\n\n  loadNoCache(camera: Camera) {\n    const { gl } = this;\n    // $FlowFixMe\n    const { __exglCtxId: exglCtxId } = gl;\n    let disposed = false;\n    const dispose = () => {\n      disposed = true;\n    };\n    const glView = gl.getExtension(\"GLViewRef\");\n    const promise: Promise<*> = !glView\n      ? Promise.reject(new Error(\"GLViewRef not available\"))\n      : glView.createCameraTextureAsync(camera).then(texture => {\n          if (disposed) return neverEnding;\n          // $FlowFixMe\n          this.objIds.set(texture, texture.exglObjId);\n          const width = 0;\n          const height = 0;\n          // ^ any way to retrieve these ?\n          return { texture, width, height };\n        });\n    return { promise, dispose };\n  }\n}\n\nglobalRegistry.add(ExpoCameraTextureLoader);\n\nexport default ExpoCameraTextureLoader;\n"]}